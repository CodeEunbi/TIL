프로그램 : 명령어들의 집합

핵심 : 새 연산을 정의하고 조합해 유용한 작업을 수행하는 것

배우는 이유

- 쉽고 간결한 문법
- 파이썬 커뮤니티의 지원 : 세계적인 규모의 풍부한 온라인 포럼 및 커뮤니티 생태계

알고리즘 구현에 유리

- 직관적인 문법
- 강력한 표준 라이브러리
- 빠른 프로토타이핑(빠르게 테스트하고 수정할 수 있음)

파이썬 프로그램 <> 파이썬 인터프리터(번역) <> 운영체제(CPU)

- low level : 기계어 <>high level : 파이썬, 자바, C++, C
- 훨씬 더 사용하기 쉽고 운영체제간 이식도 가능(확장성)
- shell 이라는 프로그램으로 한 번에 한 명령어 씩 입력해 실행(python -i/exit()하면 종료)
- 확장자가 .py 파일에 작성된 파이썬 프로그램 실행(주로 사용할 것)
- 주로 vscode에서 python을 작성 후

어느 시점에 

Python, Javascript > 인터프린트 언어, 스크립트 언어

- 한줄 넣고 한줄 번역되고 반복됨

Java, C > compile

- 여러 줄이 있으면 한 번에 보내고 완벽히 번역한 기계어 집합이 만들어지고 cpu로 전달

---

## 표현식과 값

표현식(Expression) : 값으로 평가될 수 있는 코드 조각

값(Value) : 표현식이 평가된 결과

if) 3 + 5 ⇒ 표현식 : 3+5/값 : 8

>> 표현식이 평가되어 값이 반환

평가(Evaluate) : 표현식을 실행하여 값을 얻는 과정

- 표현식을 순차적으로 평가하여 프로그램의 동작을 결정

문장(Statement) : 실행 가능한 동작을 기술하는 코드(조건문, 반복문, 함수 정의 등)

- 보통 여러개의 표현식을 포함
- 포함

---

## 타입 (Type)

- 변수나 값이 가질 수 있는 데이터 종류

     > 어떤 종류의 데이터인지, 어떻게 해석 되고 처리되어야 하는지 정의

1 + 2 >> 1은 값(피연산자) + 는 연산자

타입은 2가지 요소로 이루어짐

“값”과 “값에 적용할 수 있는 연산”

### 데이터 타입

- Numeric Type

     - int(정수), float(실수), complex(복소수)

- Sequence types

      - list. tuple, range

- Text Sequence Type

      - str(문자열)

- Non-sequence Types

       - set, dict

- 기타

       - Boolean, None, Functions

>> 데이터 타입에 맞는 연산을 수행할 수 있음

### 산술 연산자

| 기호 | 연산자 |
| --- | --- |
| - | 음수부호 |
| + | 덧셈 |
| - | 뺄셈 |
| * | 곱셈 |
| / | 나눗셈 |
| // | 정수 나눗셈(몫) |
| % | 나머지 |
| ** | 지수(거듭제곱) |

| 우선순위 | 연산자 | 연산 |
| --- | --- | --- |
| 높음 | ** | 지수 |
|  | - | 음수 부호 |
|  | *, /, //, % | 곱셈, 나눗셈, 정수 나눗셈, 나머지 |
| 낮음 | +, - | 덧셈, 뺄셈 |

---

# 변수와 메모리 “값이 저장되는 법”
변수 : 값을 저장하기 위한 이름 → 값을 참조조

변수할당 : 표현식을 통해 변수에 값을 저장장

할당문 “ 변수 degrees에 값 36.5를 할당했다 > degrees = 36.5

재할당 “변수 degrees에 값 ‘abc’를 재할당했다 > degrees ‘abc’

variable = expression

- 할당 연산자(=)오른쪽에 있는 표현식을 평가해서 값(메모리 주소)을 생성
- 값의 메모리 주소를 ‘=’ 왼쪽에 있는 변수에 저장
- 존재하지 않는 변수라면 → 새 변수를 생성
- 기존에 존재했던 변수라면 → 기존 변수를 재사용해서 변수에 들어있는 메모리 주소를 변경

객체(Object)

- 타입을 갖는 메모리 주소 내 값
- 값이 들어있는 상자
- 변수는 그 변수가 참조하는 객체의 메모리 주소를 가짐
- 변수 degrees는 값 36.5를 참조

---

## Data Types

값의 종류와 그 값에 적용 가능한 연산과 동작을 결정하는 속성

- 데이터 타입이 필요한 이유

   - 값들을 구분, 어떻게 다루어야 하는지

   - 변수의 의도를 쉽게 이해할 수 있고 잘못된 데이터 타입으로 인한 오류를 미리 예방

### Numeric Types

- int(정수자료형) : 정수를 표현하는 자료형
- 진수 표현

     - 2진수(binary) : 0b

     - 8진수(octal) : 0o

     - 16진수(hexadecimal) : 0x

### float

실수 자료형 : 실수를 표현

ex) 소수점으로 표현, 3.14, -2.7

프로그래밍 언어에서 float는 실수에 대한 근삿값

지수 표현 방식 = e/E

ex) 314*0.01 

number = 314e -2

**유한 정밀도**

- 컴퓨터 메모리 용량이 한정돼있고 한 숫자에 대해 저장하는 용량이 제한
- 0.666666666666666과 1.6666666666666667은 제한된 양의 메모리에 저장할 수 있는 2/3과 5/3에 가장 가까운 값

**실수 연산시 주의 사항**

- 컴퓨터는 2진수 사용, 사람은 10진법
- 이 때 10진수 0.1은 2진수로 표현하면 0.0001100xXXXXXXXX과 같이 무한대로 반복
- 무한대 숫자를 그대로 저장할 수 없어서 사람이 사용하는 10진법의 근삿값만 표시
- 0.1의 경우 36028XXX/2 ** 55 이며 0.1에 가깝지만 동일하지는 않음
- 이 과정에서 예상치 못한 결과
- Floating point rounding error(부동소수점)

**부동소수점 에러**

- 컴퓨터가 실수를 표현하는 방식으로 인해 발생하는 작은 오차
- 원인 → 실수를 2진수로 변환하는 과정에서 발생하는 근사치 표현

해결책

- 대표적으로 decimal 모듈을 사용해 부동소수점 연산의 정확성을 보장하는 방법

       - from decimal import Decimal

- 이외에도 다양한 해결방법이 존재

## Sequence Types

여러 개의 값들을 순서대로 나열하여 저장하는 자료형

(str, list, tuple, range)

- 순서(sequence)

      - 값들이 순서대로 저장(정렬x)

- 인덱싱(Indexing)

      - 각 값에 고유한 인덱스(번호)를 가지고 있으며, 인덱스를 사용하여 특정위치의 값을 선택하거나 수정할 수 있음  → 0번부터 시작

- 슬라이싱(slicing)

       - 인덱스 범위를 조절해 부분적인 값을 추출할 수 있음

- 길이(Length)

        - len()함수를 사용하여 저장된 값의 개수(길이)를 구할 수 있음

- 반복(Iteration)

         - 반복문을 사용하여 저장된 값들을 반복적으로 처리할 수 있음

⇒ 인덱싱, 슬라이싱, 길이, 반복은 순서대로 나열하기에 가능함

### str(문자열)

문자들의 순서가 있는 변경 불가능한 시퀀스 자료형

**문자열 표현**

- 문자열은 단일 문자나 여러 문자의 조합으로 이루어짐
- 작은 따옴표(’), 큰따옴표(”)로 감싸서 표현

 print(’Hello World!’)

- 따옴표가 둘 다 되지만 섞어쓰지 말기

**중첩 따옴표**

- 따옴표 안에 따옴표를 표현할 경우

    - 작은 따옴표가 들어있는 경우는 큰따옴표로 문자열 생성(’””’)

    - 큰 따옴표가 들어있는 경우는 작은 따옴표로 문자열 생성(”’’”)

**Escape Sequence**

- 역슬래시(back slash \) 뒤에 특정 문자가 와서 특수한 기능을 하는 문자 조합
- 파이썬의 일반적인 문법 규칙을 잠시 탈출한다는 의미

| 예약문자 | 내용(의미) |
| --- | --- |
| \n | 줄바꿈 |
| \t | 탭 |
| \\ | 백슬래시 |
| \’ | 작은 따옴표 |
| \” | 큰 따옴 |

ex) #이 다음은      
      엔터입니다.                                                      ⇒ print(’이 다음은 엔터\n입니다.’)

### String Interpolation

문자열 내에 변수나 표현식을 삽입하는 방법(보간법)

**f-string**

- 문자열에 f또는 F접두어를 붙이고 표현식을 {expression}로 작성하는 문법
- 문자열에 파이썬 표현식의 값을 삽입할 수 있음

**인덱스(index)**

- 시퀀스 내의 값들에 대한 고유한 번호로 각 값의 위치를 식별하는데 사용되는 숫

**슬라이싱(Slicing)**

- 시퀀스의 일부분을 선택하여 추출하는 작업

   ⇒ 시작 인덱스와 끝 인덱스를 지정하여 해당 범위의 값을 포함하는 새로운 시퀀스 생성

| “ | h | e | l | l | o |
| --- | --- | --- | --- | --- | --- |
| index | 0 | 1 | 2 | 3 | 4 |
| index | -5 | -4 | -3 | -2 | -1 |

my_str[2:4] → ll

my_str[:3] → hel ⇒ 0을 쓰지 않고 처음을 생략

my_str[3:] → lo ⇒ 끝 생략

my_str[:] ⇒ 처음부터 끝까지 생략

step

my_str[0:5:2] → 2칸 2칸→ hlo

my_str[: : -1] → 문자열 뒤집기 ⇒  olleh

---

# Style Guide

 코드의 일관성과 가독성을 향상시키기 위한 규칙과 권장 사항들의 모음        

- 변수명은 무엇을 위한 변수인지 직관적인 이름을 가져야함
- 공백(spaces) 4칸을 사용하여 코드 블록을 들여쓰기
- 한 줄의 길이는 79자로 제한하며, 길어질 경우 줄 바꿈을 사용
- 문자와 밑줄(_)을 사용하여 함수, 변수, 속성의 이름을 작성
- 함수 정의나 클래스 정의 등의 블록 사이에는 빈줄을 추가
- …

변수명 규칙

- 영문 알파벳, 언더스코어(_), 숫자로 구성
- 숫자로 시작할 수 없음
- 대소문자를 구분
- 파이썬 내부 예약어로 사용할 수 없음

주석(Comment)

- 프로그램 코드 내에 작성되는 설명이나 메모
- 인터프리터에 의해 실행되지 않음

주석의 목적

- 코드의 특정부분을 설명 및 임시로 코드 비활성화
- 코드를 이해하거나 문서화
- 다른 개발자나 자신에게 코드의 의도나 동작을 설명하는데 도움

*python tutor > 알고리즘 때 사용